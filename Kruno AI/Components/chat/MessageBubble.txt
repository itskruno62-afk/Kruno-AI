import React from "react";
import { motion } from "framer-motion";
import { Bot, User, Copy, CheckCheck } from "lucide-react";
import { Button } from "@/components/ui/button";
import { format } from "date-fns";

export default function MessageBubble({ message, isUser }) {
  const [copied, setCopied] = React.useState(false);

  const copyToClipboard = async () => {
    await navigator.clipboard.writeText(message.content);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20, scale: 0.95 }}
      animate={{ opacity: 1, y: 0, scale: 1 }}
      exit={{ opacity: 0, y: -20, scale: 0.95 }}
      transition={{ duration: 0.3, ease: "easeOut" }}
      className={`flex gap-4 mb-6 ${isUser ? 'justify-end' : 'justify-start'}`}
    >
      {!isUser && (
        <div className="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center shadow-lg flex-shrink-0">
          <Bot className="w-5 h-5 text-white" />
        </div>
      )}
      
      <div className={`max-w-[70%] ${isUser ? 'order-first' : ''}`}>
        <div
          className={`relative px-6 py-4 rounded-3xl shadow-sm ${
            isUser
              ? 'bg-gradient-to-r from-blue-500 to-blue-600 text-white ml-4'
              : 'bg-white/80 backdrop-blur-sm text-slate-700 mr-4 border border-white/20'
          }`}
        >
          {message.type === 'image' && message.image_url && (
            <div className="mb-3">
              <img 
                src={message.image_url} 
                alt="Generated image" 
                className="rounded-2xl max-w-full h-auto shadow-lg"
              />
            </div>
          )}
          
          <p className="text-sm leading-relaxed whitespace-pre-wrap">
            {message.content}
          </p>
          
          {!isUser && (
            <Button
              variant="ghost"
              size="icon"
              className="absolute -top-2 -right-2 w-8 h-8 bg-white shadow-md hover:bg-gray-50 text-gray-600"
              onClick={copyToClipboard}
            >
              {copied ? (
                <CheckCheck className="w-4 h-4 text-green-500" />
              ) : (
                <Copy className="w-4 h-4" />
              )}
            </Button>
          )}
        </div>
        
        <p className={`text-xs text-slate-400 mt-2 ${isUser ? 'text-right mr-4' : 'ml-4'}`}>
          {format(new Date(message.timestamp), 'HH:mm')}
        </p>
      </div>
      
      {isUser && (
        <div className="w-10 h-10 bg-gradient-to-r from-emerald-400 to-cyan-400 rounded-full flex items-center justify-center shadow-lg flex-shrink-0">
          <User className="w-5 h-5 text-white" />
        </div>
      )}
    </motion.div>
  );
}